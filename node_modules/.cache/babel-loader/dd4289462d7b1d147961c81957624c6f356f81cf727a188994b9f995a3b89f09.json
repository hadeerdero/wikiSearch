{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\RedFoxes 2\\\\Desktop\\\\react folder\\\\wikiSearch\\\\src\\\\components\\\\ButtonGroup.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ButtonGroup = ({\n  children\n}) => {\n  _s();\n  console.log(children, \"childrens\");\n  const calBackFun = () => {\n    console.log('call back function clicked');\n  };\n  const [clonedElements, setClonedElements] = useState([]);\n  //     children.map((el)=>{\n  //         const text = el.props.children + \"?\";\n  //   const cloneElement = React.cloneElement(el, {\n  //     color: \"red\",\n  //     customClass: \"group\",\n  //     calBackFun\n  //   },text);\n  //   setClonedElements((prev) => [...prev, cloneElement]);\n  //     })\n  const newClonedElements = children.map((el, index) => {\n    const text = el.props.children + \"?\";\n    return /*#__PURE__*/React.cloneElement(el, {\n      key: index,\n      color: \"red\",\n      customClass: \"group\",\n      calBackFun\n    }, text);\n  });\n\n  // Update state with cloned elements\n  setClonedElements(newClonedElements);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: clonedElements\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(ButtonGroup, \"XmZvHIVAoW3v0SeH4lKIPZuxLWc=\");\n_c = ButtonGroup;\nexport default ButtonGroup;\nvar _c;\n$RefreshReg$(_c, \"ButtonGroup\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","ButtonGroup","children","_s","console","log","calBackFun","clonedElements","setClonedElements","newClonedElements","map","el","index","text","props","cloneElement","key","color","customClass","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/RedFoxes 2/Desktop/react folder/wikiSearch/src/components/ButtonGroup.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nconst ButtonGroup = ({ children }) => {\r\n    console.log(children,\"childrens\")\r\n    const calBackFun = ()=>{\r\n        console.log('call back function clicked')\r\n    }\r\n    const [clonedElements,setClonedElements] = useState([])\r\n//     children.map((el)=>{\r\n//         const text = el.props.children + \"?\";\r\n//   const cloneElement = React.cloneElement(el, {\r\n//     color: \"red\",\r\n//     customClass: \"group\",\r\n//     calBackFun\r\n//   },text);\r\n//   setClonedElements((prev) => [...prev, cloneElement]);\r\n//     })\r\nconst newClonedElements = children.map((el,index) => {\r\n    const text = el.props.children + \"?\";\r\n    return React.cloneElement(el, {\r\n        key:index,\r\n      color: \"red\",\r\n      customClass: \"group\",\r\n      calBackFun,\r\n    }, text);\r\n  });\r\n\r\n  // Update state with cloned elements\r\n  setClonedElements(newClonedElements);\r\n  \r\n  return (\r\n    <>\r\n      <div>{clonedElements}</div>\r\n    </>\r\n  );\r\n};\r\nexport default ButtonGroup;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AACxC,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAClCC,OAAO,CAACC,GAAG,CAACH,QAAQ,EAAC,WAAW,CAAC;EACjC,MAAMI,UAAU,GAAGA,CAAA,KAAI;IACnBF,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;EAC7C,CAAC;EACD,MAAM,CAACE,cAAc,EAACC,iBAAiB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAC3D;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,MAAMa,iBAAiB,GAAGP,QAAQ,CAACQ,GAAG,CAAC,CAACC,EAAE,EAACC,KAAK,KAAK;IACjD,MAAMC,IAAI,GAAGF,EAAE,CAACG,KAAK,CAACZ,QAAQ,GAAG,GAAG;IACpC,oBAAOP,KAAK,CAACoB,YAAY,CAACJ,EAAE,EAAE;MAC1BK,GAAG,EAACJ,KAAK;MACXK,KAAK,EAAE,KAAK;MACZC,WAAW,EAAE,OAAO;MACpBZ;IACF,CAAC,EAAEO,IAAI,CAAC;EACV,CAAC,CAAC;;EAEF;EACAL,iBAAiB,CAACC,iBAAiB,CAAC;EAEpC,oBACEX,OAAA,CAAAE,SAAA;IAAAE,QAAA,eACEJ,OAAA;MAAAI,QAAA,EAAMK;IAAc;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM;EAAC,gBAC3B,CAAC;AAEP,CAAC;AAACnB,EAAA,CAjCIF,WAAW;AAAAsB,EAAA,GAAXtB,WAAW;AAkCjB,eAAeA,WAAW;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}